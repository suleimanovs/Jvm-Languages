package function

fun main() {


    // в фигурных скобках тело функций, в круглых вызов
    { println("little function") }();


    /**
     * Это лямбда функция, полная версия, но можем не указать явно типы параметров.
     * В отличие от именованной функции, анонимная функция не требует — а в редких случаях
     * даже запрещает — использовать ключевое слово return для возврата данных.
     * Анонимные функции неявно, или автоматически, возвращают результат выполнения последней инструкции в теле функции,
     * позволяя отбросить ключевое слово return.
     * Эта особенность анонимных функций и удобна, и нужна для их синтаксиса. Ключевое слово return запрещено
     * в анонимной функции, так как это создает двусмысленность для компилятора: из какой функции вернуть значение — из
     * функции, в которой была вызвана анонимная функция(в нашем случае в main), или из самой анонимной функции.
     */
    val anonym1: (Int, Int) -> Int = { a: Int, b: Int -> a + b } // эти функции
    val anonym2: (Int, Int) -> Int = { a, b -> a + b }          // работают
    val anonym3 = { a: Int, b: Int -> a + b }                  // одинаково
    /**
     * В лямбде функции, которая принимает ровно один аргумент, вместо определения имени параметра можно использовать
     * удобную альтернативу — ключевое слово it.
     * В лямбде функциях с одним параметром можно использовать и именованный параметр, и его замену — ключевое слово it.
     */
    val anonym4: (Int) -> Int = {  it + 2 }

    /**
     * Авто определение типов
     */
    val anonym5 = {  12 + 2 }


    /**
     * Это аноним функция, полная версия, но можем не указать явно возвращаемый тип
     */

    var anonymFunc1 = fun(x: Int, y: Int): Int {
        return x + y
    }
    var anonymFunc2 = fun(x: Int, y: Int): Int = x + y
    var anonymFunc3 = fun(x: Int, y: Int) = x + y


}