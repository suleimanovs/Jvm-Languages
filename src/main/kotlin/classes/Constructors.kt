package classes

/**
 * Конструкторы могут иметь дефолтные значения для аргументов
 */
class Person private constructor(val name: String, val age: Int, val address: String = "Shymkent") {


    /**
     * Вторичный конструктор ссылается на главный, передавая ему количество необходимых параметров.
     * Вторичный конструктор вызывает главный конструктор с полным набором параметров. Ключевое слово this в данном
     * случае ссылается на экземпляр класса, для которого объявлен конструктор(первичный).
     * Конкретно в этом случае this вызывает другой конструктор, объявленный внутри класса, — главный конструктор.
     * Для конструкторов можно так же ставить access modifier
     */
    constructor(name: String) : this(name, -1){
        println("second constructor")
    }


    /**
     * Третий конструктор, либо должен ссылаться на вторичный конструктор, который в свою очередь ссылается на первичный,
     * передавая параметры. Либо сам должен напрямую ссылаться на первичный конструктор
     */
    private constructor() : this("Unknown")


    fun personFactory(): Person {

        /**
         * Чем больше аргументов по умолчанию используется, тем больше появляется
         * вариантов для вызова конструктора. Чем больше вариантов — тем больше двусмысленности,
         * поэтому Kotlin позволяет использовать в вызове конструктора именованные аргументы,
         * аналогичные именованным аргументам в вызовах функций.
         */

        return Person(name = "Osman", age = 20, address = "Shymkent")
    }

}

