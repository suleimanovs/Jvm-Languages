package classes

class LateInit {

    /**
     * В любое объявление var-свойства можно добавить ключевое слово lateinit.
     * Тогда компилятор Kotlin позволит отложить инициализацию свойства до того момента, когда такая возможность появится.
     * Это полезный инструмент, но его следует применять с осторожностью. Если переменная с поздней инициализацией
     * получит начальное значение до первого обращения к ней, проблем не будет. Но если сослаться на такое свойство
     * до его инициализации, вас ждет неприятное исключение UninitializedPropertyAccessException.
     *
     * Обратите внимание, что поля с отложенной инициализацией всегда объявляются как var, потому что их значения
     * изменяются за пределами конструктора, в то время как свойства val компилируются в финальные поля,
     * которые должны инициализироваться в конструкторе.
     */
    lateinit var str: String


    /**
     * Ключевое слово lateinit действует как негласный договор: «Я обязуюсь инициализировать эту переменную
     * до первой попытки обратиться к ней». Kotlin предоставляет инструмент для проверки факта инициализации
     * таких переменных: метод [isInitialized]. Вы можете вызывать isInitialized каждый раз, когда есть сомнения,
     * что переменная lateinit инициализирована, чтобы избежать UninitializedPropertyAccessException.
     */
    fun getValue(): String {
        if (::str.isInitialized) {
            return str
        }
        str = "Some"
        return str
    }

}