package annotation

import kotlin.reflect.KClass

/**
 * Аннотации являются специальной формой синтаксических метаданных, добавленных в исходный код.
 * Для объявления аннотации используйте модификатор annotation перед именем класса.
 *
 * Аннотация позволяет связать дополнительные метаданные с объявлением.
 * Затем доступ к метаданным можно получить с использованием инструментов, работающих с исходным кодом,
 * с файлами скомпилированных классов или во время выполнения - в зависимости от того, как настроены аннотации.
 *
 * @Retention Программируя на Java, вы наверняка сталкивались с ещё одной важной метааннотацией, @Retention.
 * С её помощью можно определить, должна ли объявляемая аннотация сохраняться в файле .class и будет ли она доступна
 * во время выполнения через механизм рефлексии.
 * По умолчанию Java сохраняет аннотации в файлах .class, но они остаются недоступными во время выполнения.
 * Однако в большинстве случаев доступ к аннотациям во время выполнения был бы весьма желателен,
 * поэтому в KotLin используются иные умолчания: аннотации получают признак хранения RUNTIME по умолчанию.
 *
 * Тип [KClass] - это Kotlin-вepcия типа [java.lang.Class] в Java. Он используется для хранения ссылок на классы Kotlin.
 * Типовой параметр в KC lass определяет, на какие классы Kotlin может ссылаться данная ссылка
 */
@Retention(value = AnnotationRetention.RUNTIME)
@Target(allowedTargets = [AnnotationTarget.FIELD])
annotation class Fancy(val name: String = "unknown", val clazz: KClass<*> = String::class)


class Test(@Fancy(clazz = String::class) val d: String) {
    @Fancy(clazz = String::class)
    val s: String = ""
}

fun main() {
}